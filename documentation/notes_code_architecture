main.cpp:
	simple startup layer & emscripten shim.
	Initializes and starts main_loop	

engine.hpp
	# probably only used by main.c

engine.cpp
	# The base class for the whole game.
	# should not contain anything specific to this game
	Handles and owns Display object
	Handles and owns Gamestate object, through that, all other objects.
	Handles "real time"
	handles input
	calls ticks on all the managers. //this is always before object ticks.
	calls ticks on all the objects.
	calls the draw function on current gamestate.

gamestate.hpp
	# Central object from which all in game objects can be acquired.
	# Should be used by any code that wants to interact with other objects in the game.

gamestate.cpp
	# Handles storage of everything game-related: current map state, time, score etc.
	Should not contain any specific to snake game.

display.hpp
	# Should be called from engine

display.cpp
	# generic
display_draw_objects.cpp
	# how to draw each object






managers:
	timeline manager: 
		potentially completely wipes the board and replaces with new objects.
		takes snapshots.
		handles all the time shenanigans

	spawn manager:
		spawns objects based on plan (for this level).
		detects when previously spawned objects are destroyed (via callback?)

objects: (blah_obj.c / blah_obj.h)
  any code that is specific to an object / interaction between objects should be in the
	need to implement a tick function (updates the object) 
	need to implement a draw function

	when two objects interact, the rule is, the code is placed on the object that is affected.
	So when a snake hits a wall, it should damage itself.
	So when a snake hits a pellet, it should check the properties of the pellet, then modify itself(add length, energy), then call a function "get eaten" on the pellet.
	When a projectile hits the snake, it should call snake.damage.




echo_objects:
  objects that follow behaviour from first time through timeline.
  contains reference to corresponding object in the past.
  Each tick, check past object, and update self location.
  need to implement a draw function (call draw of original function!)




snake object:
  One way to write the snake game would be to have the object just be a head + a list of body parts.
  Each step, the head moves forward, and spawns a body part.
  The body part displayed depends on how far it is from the head.